import tkinter as tk
import random

# --- Global variables ---
time_left = 15
keystrokes = 0
running = False
target_text = ""

def start_timer():
    """Start the countdown timer."""
    global running
    running = True
    countdown()

def countdown():
    """Update the timer every second."""
    global time_left, running, keystrokes
    if time_left > 0:
        timer_label.config(text=f"Time: {time_left}")
        root.after(1000, countdown)
        time_left -= 1
    else:
        running = False
        entry.config(state="disabled")  # disable typing
        lpm = keystrokes * (60 / 15)
        wpm = lpm / 5
        result_label.config(text=f"âœ… Time's up! LPM: {lpm:.1f}, WPM: {wpm:.1f}")

def key_pressed(event):
    """Track keystrokes and start timer on first key press."""
    global keystrokes, running, time_left
    if not running and time_left == 15:  # start on first key
        start_timer()
    if event.char.isalpha() and entry.cget("state") == "normal":
        keystrokes += 1
    check_text()

def generate_new_word():
    things_to_write = list("abcdefghijklmnopqrstuvwxyz")
    word_l = random.randint(4, 8)
    return "".join(random.choice(things_to_write) for _ in range(word_l))

def update_target_display():
    """Show target_text in color-coded form."""
    target_display.config(state="normal")
    target_display.delete("1.0", tk.END)

    user_input = entry.get()

    for i, char in enumerate(target_text):
        if i < len(user_input):
            if char == user_input[i]:
                color = "green"
            else:
                color = "red"
        else:
            color = "black"
        target_display.insert(tk.END, char, color)

    target_display.tag_add("center", "1.0", "end")
    target_display.config(state="disabled")

def check_text():
    """Check typed text and update feedback + colored label."""
    update_target_display()

    user_input = entry.get()
    if user_input == target_text:
        result_label.config(text="ðŸŽ‰ Correct! Keep going...")
    else:
        result_label.config(text="Keep typing...")

def restart_word(event=None):
    """Restart only the word (timer keeps running)."""
    global target_text
    target_text = generate_new_word()
    entry.delete(0, tk.END)
    result_label.config(text="Keep typing...")
    update_target_display()

def restart_full(event=None):
    """Restart the entire test (reset timer + typing)."""
    global target_text, time_left, keystrokes, running
    time_left = 15
    keystrokes = 0
    running = False
    target_text = generate_new_word()
    entry.config(state="normal")  # re-enable typing
    entry.delete(0, tk.END)
    result_label.config(text="Start typing to begin the test!")
    timer_label.config(text=f"Time: {time_left}")
    update_target_display()


# --- Tkinter UI Setup ---
root = tk.Tk()
root.title("Typing Speed Test")

target_text = generate_new_word()

# Colored target text display using Text widget (centered + bigger font)
target_display = tk.Text(root, height=1, font=("Courier", 28), bd=0, bg=root.cget("bg"))
target_display.tag_configure("green", foreground="green")
target_display.tag_configure("red", foreground="red")
target_display.tag_configure("black", foreground="black")
target_display.tag_configure("center", justify="center")  # center align
target_display.pack(pady=15, fill="x")
target_display.config(state="disabled")

# Entry widget (centered text)
entry = tk.Entry(root, font=("Courier", 20), width=40, justify="center")
entry.pack(pady=10)
entry.bind("<KeyRelease>", key_pressed)

# Timer label
timer_label = tk.Label(root, text=f"Time: {time_left}", font=("Courier", 18))
timer_label.pack(pady=10)

# Result label
result_label = tk.Label(root, text="Start typing to begin the test!", font=("Arial", 14))
result_label.pack(pady=10)

# Restart button in bottom-left corner (does full restart)
restart_button = tk.Button(root, text="Restart", command=restart_full)
restart_button.pack(side="left", anchor="s", padx=1, pady=1)

# Bind SPACE to restart only word
root.bind("<space>", restart_word)

# Bind ENTER to restart full test
root.bind("<Return>", restart_full)

# Initial display of the target word
update_target_display()

root.mainloop()
